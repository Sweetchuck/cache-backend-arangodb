
version: 2.1

orbs:
    codecov: 'codecov/codecov@3.0.0'

.env_common: &env_common
    SHELL: '/bin/bash'

.env_composer: &env_composer
    COMPOSER_NO_INTERACTION: '1'
    COMPOSER_MEMORY_LIMIT: '-1'
    COMPOSER_DISABLE_XDEBUG_WARN: '1'
    COMPOSER_CACHE_DIR: '/home/circleci/.cache/composer'

.env_arangodb_common: &env_arangodb_common
    ARANGO_ROOT_PASSWORD: 'root'

.env_arangodb_server: &env_arangodb_server
    ARANGO_NO_AUTH: 1

.env_arangodb_client: &env_arangodb_client
    ARANGODB_CACHE_OPTION_ENDPOINT: 'tcp://arangodb:8529'
    ARANGODB_CACHE_OPTION_AUTHUSER: 'root'
    ARANGODB_CACHE_OPTION_AUTHPASSWD: 'root'
    ARANGODB_CACHE_OPTION_DATABASE: 'cache'

.docker:
    php_min: &docker_php_min
        image: 'cimg/php:8.1'
        environment:
            <<: *env_common
            <<: *env_composer
            <<: *env_arangodb_common
            <<: *env_arangodb_client

    php_plus1: &docker_php_plus1
        image: 'cimg/php:8.2'
        environment:
            <<: *env_common
            <<: *env_composer
            <<: *env_arangodb_common
            <<: *env_arangodb_client

    arangodb0310: &docker_arangodb0310
        image: 'arangodb:3.10.4'
        environment:
            <<: *env_arangodb_common
            <<: *env_arangodb_server

executors:
    php_min:
        docker:
            -
                name: 'main'
                <<: *docker_php_min

    php_min_arangodb0310:
        docker:
            -
                name: 'main'
                <<: *docker_php_min
            -
                name: 'arangodb'
                <<: *docker_arangodb0310

    php_plus1_arangodb0310:
        docker:
            -
                name: 'main'
                <<: *docker_php_plus1
            -
                name: 'arangodb'
                <<: *docker_arangodb0310

commands:
    bash_env_init:
        description: 'BASH_ENV - init'
        steps:
            -
                run:
                  name: 'BASH_ENV - init'
                  command: |-
                    echo "source '${PWD}/'.circleci/app.bash" >> "${BASH_ENV}"

    composer_install:
        description: 'Install Composer dependencies with cache restore and save'
        steps:
            -
                restore_cache:
                    name: 'Composer - cache restore'
                    keys:
                        - 'composer-{{ checksum "./composer.lock" }}-2'

            -
                run:
                    name: 'Composer - install'
                    command: >
                        composer install --no-progress

            -
                save_cache:
                    name: 'Composer - cache save'
                    key: 'composer-{{ checksum "./composer.lock" }}-2'
                    paths:
                        - '~/.cache/composer'

    lint:
        description: 'Run linters'
        steps:
            -
                run:
                    name: 'Run linters'
                    command: |
                        "$(composer config bin-dir)/robo" lint

    php_extension_install_and_enable:
        parameters:
            ext_name:
                type: 'string'
        description: 'PHP extension - install and enable - <<parameters.ext_name>>'
        steps:
            -
                run:
                    name: 'PHP extension - install and enable - <<parameters.ext_name>>'
                    command: 'app_php_extension_install_and_enable <<parameters.ext_name>>'

    arangodb_wait:
        description: 'Wait until ArangoDB ready to serve'
        steps:
            -
                run:
                    name: 'Wait until ArangoDB ready to serve'
                    command: 'app_arangodb_wait'

    arangodb_database_create:
        description: 'Create ArangoDB database'
        steps:
            -
                run:
                    name: 'Create ArangoDB database'
                    command: 'app_arangodb_database_create'

    test:
        description: 'Run tests'
        steps:
            -
                run:
                    name: 'Delete all the reports'
                    command: 'rm -rf ./reports/'
            -
                run:
                    name: 'Test - unit'
                    command: |
                        "$(composer config bin-dir)/robo" test Unit
            -
                codecov/upload:
                    flags: 'unit'
                    file: './reports/machine/coverage/coverage.xml'
            -
                store_test_results:
                    name: 'Store unit test results'
                    path: './reports/machine/unit'
            -
                run:
                    name: 'Delete all the reports'
                    command: |
                        rm \
                            --recursive \
                            --force \
                            ./reports/
            -
                run:
                    name: 'Test - acceptance'
                    command: |
                        "$(composer config bin-dir)/robo" test Acceptance
            -
                codecov/upload:
                    flags: 'acceptance'
                    file: './reports/machine/coverage/coverage.xml'
            -
                store_test_results:
                    name: 'Store acceptance test results'
                    path: './reports/machine/unit'

jobs:
    build:
        executor: 'php_min'
        steps:
            - 'checkout'
            - 'composer_install'
    lint:
        executor: 'php_min'
        steps:
            - 'checkout'
            - 'composer_install'
            - 'lint'
    test:
        parameters:
            executor:
                type: 'string'
        executor: '<<parameters.executor>>'
        steps:
            - 'checkout'
            - 'bash_env_init'
            -
                php_extension_install_and_enable:
                    ext_name: 'pcov'
            -
                php_extension_install_and_enable:
                    ext_name: 'igbinary'
            -
                php_extension_install_and_enable:
                    ext_name: 'msgpack'
            - 'composer_install'
            - 'arangodb_wait'
            - 'arangodb_database_create'
            - 'test'

workflows:
    lint_and_test:
        jobs:
            -
                build: {}
            -
                lint:
                    requires:
                        - 'build'
            -
                test:
                    name: 'test_<<matrix.executor>>'
                    requires:
                        - 'build'
                    matrix:
                        parameters:
                            executor:
                                - 'php_min_arangodb0310'
                                - 'php_plus1_arangodb0310'
