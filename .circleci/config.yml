
version: 2.1

orbs:
    codecov: 'codecov/codecov@3.0.0'

.env_common: &env_common
    SHELL: '/bin/bash'

.env_composer: &env_composer
    COMPOSER_NO_INTERACTION: '1'
    COMPOSER_MEMORY_LIMIT: '-1'
    COMPOSER_DISABLE_XDEBUG_WARN: '1'
    COMPOSER_CACHE_DIR: '/home/circleci/.cache/composer'

.env_arangodb_common: &env_arangodb_common
    ARANGO_ROOT_PASSWORD: 'root'

.env_arangodb_server: &env_arangodb_server
    ARANGO_NO_AUTH: 1

.env_arangodb_client: &env_arangodb_client
    ARANGODB_CACHE_OPTION_ENDPOINT: 'tcp://arangodb:8529'
    ARANGODB_CACHE_OPTION_AUTHUSER: 'root'
    ARANGODB_CACHE_OPTION_AUTHPASSWD: 'root'
    ARANGODB_CACHE_OPTION_DATABASE: 'cache'

.docker:
    php_min: &docker_php_min
        image: 'circleci/php:7.4'
        environment:
            <<: *env_common
            <<: *env_composer
            <<: *env_arangodb_common
            <<: *env_arangodb_client

    php_plus1: &docker_php_plus1
        image: 'circleci/php:8.0'
        environment:
            <<: *env_common
            <<: *env_composer
            <<: *env_arangodb_common
            <<: *env_arangodb_client

    php_plus2: &docker_php_plus2
        image: 'cimg/php:8.1'
        environment:
            <<: *env_common
            <<: *env_composer
            <<: *env_arangodb_common
            <<: *env_arangodb_client

    arangodb703: &docker_arangodb307
        image: 'arangodb:3.7.3'
        environment:
            <<: *env_arangodb_common
            <<: *env_arangodb_server

executors:
    php_min:
        docker:
            -
                name: 'main'
                <<: *docker_php_min

    php_min_arangodb307:
        docker:
            -
                name: 'main'
                <<: *docker_php_min
            -
                name: 'arangodb'
                <<: *docker_arangodb307

    php_plus1_arangodb307:
        docker:
            -
                name: 'main'
                <<: *docker_php_plus1
            -
                name: 'arangodb'
                <<: *docker_arangodb307

    php_plus2_arangodb307:
        docker:
            -
                name: 'main'
                <<: *docker_php_plus2
            -
                name: 'arangodb'
                <<: *docker_arangodb307

commands:
    composer_install:
        description: 'Install Composer dependencies with cache restore and save'
        steps:
            -
                restore_cache:
                    name: 'Composer - cache restore'
                    keys:
                        - 'composer-{{ checksum "./composer.lock" }}-1'

            -
                run:
                    name: 'Composer - install'
                    command: >
                        composer install --no-progress

            -
                save_cache:
                    name: 'Composer - cache save'
                    key: 'composer-{{ checksum "./composer.lock" }}-1'
                    paths:
                        - '~/.composer/cache/'

    lint:
        description: 'Run linters'
        steps:
            -
                run:
                    name: 'Run linters'
                    command: |
                        "$(composer config bin-dir)/robo" lint

    enable_php_extension:
        description: 'Enable PHP extension: <<parameters.ext_name>>'
        parameters:
            ext_name:
                type: 'string'
        steps:
            -
                run:
                    name: 'Enable PHP extension: <<parameters.ext_name>>'
                    command: |
                        if php -m | grep '<<parameters.ext_name>>' ; then
                            exit 0
                        fi

                        iniDir="$(php -i | grep --only-matching --perl-regexp '(?<=Scan this dir for additional .ini files => ).+')"
                        mkdir -p "${iniDir}"
                        sudo ${SHELL} -c "echo 'extension=<<parameters.ext_name>>' > '${iniDir}/<<parameters.ext_name>>.ini'"

    php_extension_igbinary:
        description: 'PHP extension - igbinary'
        steps:
            -
                run:
                    name: 'PHP extension - igbinary - install'
                    command: 'sudo pecl install igbinary'
            -
                enable_php_extension:
                    ext_name: 'igbinary'

    php_extension_msgpack:
        description: 'PHP extension - msgpack'
        steps:
            -
                run:
                    name: 'PHP extension - msgpack - install'
                    command: 'sudo pecl install msgpack'
            -
                enable_php_extension:
                    ext_name: 'msgpack'

    arangodb_wait:
        description: 'Wait until ArangoDB ready to serve'
        steps:
            -
                run:
                    name: 'Wait until ArangoDB ready to serve'
                    command: '. ./.circleci/arangodb-wait.bash'

    arangodb_database_create:
        description: 'Create ArangoDB database'
        steps:
            -
                run:
                    name: 'Create ArangoDB database'
                    command: '. ./.circleci/arangodb-database-create.bash'

    test:
        description: 'Run tests'
        steps:
            -
                run:
                    name: 'Delete all the reports'
                    command: 'rm -rf ./reports/'
            -
                run:
                    name: 'Test - unit'
                    command: |
                        "$(composer config bin-dir)/robo" test Unit
            -
                codecov/upload:
                    flags: 'unit'
                    file: './reports/machine/coverage/coverage.xml'
            -
                store_test_results:
                    name: 'Store unit test results'
                    path: './reports/machine/unit'
            -
                run:
                    name: 'Delete all the reports'
                    command: 'rm -rf ./reports/'
            -
                run:
                    name: 'Test - acceptance'
                    command: |
                        "$(composer config bin-dir)/robo" test Acceptance
            -
                codecov/upload:
                    flags: 'acceptance'
                    file: './reports/machine/coverage/coverage.xml'
            -
                store_test_results:
                    name: 'Store acceptance test results'
                    path: './reports/machine/unit'

jobs:
    dummy:
        executor: 'php_min_arangodb307'
        working_directory: '~/repo'
        steps:
            - 'checkout'
            - 'arangodb_wait'
            - 'arangodb_database_create'
    build:
        executor: 'php_min'
        working_directory: '~/repo'
        steps:
            - 'checkout'
            - 'composer_install'
    lint:
        executor: 'php_min'
        working_directory: '~/repo'
        steps:
            - 'checkout'
            - 'composer_install'
            - 'lint'
    test_php_plus2:
        executor: 'php_plus2_arangodb307'
        working_directory: '~/repo'
        steps:
            - 'checkout'
            - 'php_extension_msgpack'
            - 'php_extension_igbinary'
            - 'composer_install'
            - 'arangodb_wait'
            - 'arangodb_database_create'
            - 'test'
    test_php_plus1:
        executor: 'php_plus1_arangodb307'
        working_directory: '~/repo'
        steps:
            - 'checkout'
            - 'php_extension_msgpack'
            - 'php_extension_igbinary'
            - 'composer_install'
            - 'arangodb_wait'
            - 'arangodb_database_create'
            - 'test'
    test_php_min:
        executor: 'php_min_arangodb307'
        working_directory: '~/repo'
        steps:
            - 'checkout'
            - 'php_extension_msgpack'
            - 'php_extension_igbinary'
            - 'composer_install'
            - 'arangodb_wait'
            - 'arangodb_database_create'
            - 'test'

workflows:
    lint_and_test:
        jobs:
            -
                build: {}
            -
                lint:
                    requires:
                        - 'build'
            -
                test_php_plus2:
                    requires:
                        - 'build'
            -
                test_php_plus1:
                    requires:
                        - 'build'
            -
                test_php_min:
                    requires:
                        - 'build'
